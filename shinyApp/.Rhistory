ggtitle(title)+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
scale_y_continuous(limits=c(0,1))+
theme(axis.text.x =element_text(angle=0,hjust=1))+
facet_grid(Varname ~.)
pT
patterns<-read.csv("shinyEFA/data/fpm.csv")
library(shiny)
library(datasets)
library(ggplot2) # load ggplot
patterns<-read.csv("shinyEFA/data/fpm.csv")
library(shiny)
library(datasets)
library(ggplot2) # load ggplot
patterns<-read.csv("shinyEFA/data/fpm.csv")
colors<- c("darksalmon" ,"lightskyblue")
title<- paste0("Shiny pattern")
ylims<-c(0,3)           # max for eigenvalue plot
width<-450              # width of pattern in pixels
height<-900             # height of pattern in pixels
width2<-300            # width of scree in pixels
height2<-200            # height of scree in pixels
runApp("shinyEFA")
patterns<-read.csv("shinyEFA/data/F.csv")
patterns<-read.csv("shinyEFA/datasets/F.csv")
runApp("shinyEFA")
patterns<-read.csv("shiny_EFA/datasets/fpm.csv")
print(getwd())
patterns<-read.csv("/data/fpm.csv")
patterns<-read.csv("./data/fpm.csv")
patterns<-read.csv("./data/fpm.csv")
patterns<-read.csv("./data/fpm.csv")
runApp("shinyEFA")
patterns<-read.csv("./data/fpm.csv")
runApp("shinyEFA")
fpm<-read.csv("datasets/F.csv")
View(fpm)
colors<- c("darksalmon" ,"lightskyblue")
fpm$row.names<-row.names(fpm)
dsFORp <- reshape2::melt(fpm, id.vars="row.names")  ## id.vars declares MEASURED variables (as opposed to RESPONSE variable)
dsFORp$positive <- dsFORp$value >= 0 # positive value?
dsFORp$value<-abs(dsFORp$value)
head(dsFORp,20)
str(dsFORp)
p<-ggplot(dsFORp, aes(x=variable, y=value, fill=positive))+
ggtitle(title)+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
scale_y_continuous(limits=c(0,1))+
theme(axis.text.x =element_text(angle=60,hjust=1))+
facet_grid(variable~.)
p
getwd()
fpm<-read.csv("datasets/fpm.csv")
View(fpm)
colors<- c("darksalmon" ,"lightskyblue")
fpm$row.names<-row.names(fpm)
dsFORp <- reshape2::melt(fpm, id.vars="row.names")  ## id.vars declares MEASURED variables (as opposed to RESPONSE variable)
dsFORp$positive <- dsFORp$value >= 0 # positive value?
dsFORp$value<-abs(dsFORp$value)
head(dsFORp,20)
str(dsFORp)
p<-ggplot(dsFORp, aes(x=variable, y=value, fill=positive))+
ggtitle(title)+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
scale_y_continuous(limits=c(0,1))+
theme(axis.text.x =element_text(angle=60,hjust=1))+
facet_grid(variable~.)
p
library(ggplot2)
fpm<-read.csv("datasets/fpm.csv")
str(fpm)
colors<- c("darksalmon" ,"lightskyblue")
fpm$row.names<-row.names(fpm)
dsFORp <- reshape2::melt(fpm, id.vars="row.names")  ## id.vars declares MEASURED variables (as opposed to RESPONSE variable)
dsFORp$positive <- dsFORp$value >= 0 # positive value?
dsFORp$value<-abs(dsFORp$value)
head(dsFORp,20)
str(dsFORp)
p<-ggplot(dsFORp, aes(x=variable, y=value, fill=positive))+
ggtitle(title)+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
scale_y_continuous(limits=c(0,1))+
theme(axis.text.x =element_text(angle=60,hjust=1))+
facet_grid(variable~.)
p
rm(list=ls(all=TRUE))
library(ggplot2)
fpm<-read.csv("datasets/fpm.csv")
str(fpm)
colors<- c("darksalmon" ,"lightskyblue")
fpm$row.names<-row.names(fpm)
dsFORp <- reshape2::melt(fpm, id.vars="row.names")  ## id.vars declares MEASURED variables (as opposed to RESPONSE variable)
dsFORp$positive <- dsFORp$value >= 0 # positive value?
dsFORp$value<-abs(dsFORp$value)
head(dsFORp,20)
str(dsFORp)
p<-ggplot(dsFORp, aes(x=variable, y=value, fill=positive))+
ggtitle(title)+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
scale_y_continuous(limits=c(0,1))+
theme(axis.text.x =element_text(angle=60,hjust=1))+
facet_grid(variable~.)
p
rm(list=ls(all=TRUE))
library(ggplot2)
fpm<-read.csv("datasets/fpm.csv")
str(fpm)
colors<- c("darksalmon" ,"lightskyblue")
fpm$row.names<-row.names(fpm)
dsFORp <- reshape2::melt(fpm, id.vars="row.names")  ## id.vars declares MEASURED variables (as opposed to RESPONSE variable)
dsFORp$positive <- dsFORp$value >= 0 # positive value?
dsFORp$value<-abs(dsFORp$value)
dsFORp$value<-abs(dsFORp$value)
dsFORp$value
dsFORp$value<-as.numeric(abs(dsFORp$value))
dsFORp$positive <- dsFORp$value >= 0 # positive value?
dsFORp$value<-as.numeric(abs(dsFORp$value))
View(dsFORp)
View(fpm)
dsFORp <- reshape2::melt(fpm, id.vars=c("Oblique","Rotation","kappa","Varname")  ## id.vars declares MEASURED variables (as opposed to RESPONSE variable)
dsFORp$positive <- dsFORp$value >= 0 # positive value?
View(dsFORp)
dsFORp <- reshape2::melt(fpm, id.vars=c("Oblique","Rotation","kappa","Varname")  ## id.vars declares MEASURED variables (as opposed to RESPONSE variable)
dsFORp <- reshape2::melt(fpm, id.vars=c("Oblique","Rotation","kappa","Varname"))  ## id.vars declares MEASURED variables (as opposed to RESPONSE variable)
dsFORp <- reshape2::melt(fpm, id.vars=c("Oblique","Rotation","kappa","Varname"))  ## id.vars declares MEASURED variables (as opposed to RESPONSE variable)
View(dsFORp)
View(dsFORp)
dsFORp$positive <- dsFORp$value >= 0 # positive value?
dsFORp$value<-as.numeric(abs(dsFORp$value))
dsFORp$value
dsFORp$value<-as.numeric(abs(dsFORp$value))
str(dsFORp)
dsFORp$value<-abs(as.numeric(dsFORp$value))
head(dsFORp,20)
str(dsFORp)
p<-ggplot(dsFORp, aes(x=variable, y=value, fill=positive))+
ggtitle(title)+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
scale_y_continuous(limits=c(0,1))+
theme(axis.text.x =element_text(angle=60,hjust=1))+
facet_grid(variable~.)
p
View(dsFORp)
dsFORp <- reshape2::melt(fpm, id.vars=c("Oblique","Rotation","kappa","Varname"))  ## id.vars declares MEASURED variables (as opposed to RESPONSE variable)
dsFORp$positive <- dsFORp$value >= 0 # positive value?
dsFORp$value<-abs(as.numeric(dsFORp$value))
head(dsFORp,20)
str(dsFORp)
p<-ggplot(dsFORp, aes(x=variable, y=value, fill=positive))+
ggtitle(title)+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
scale_y_continuous(limits=c(0,1))+
theme(axis.text.x =element_text(angle=60,hjust=1))+
facet_grid(Varname~.)
p
title<-"Basic Title"
title
colors<- c("darksalmon" ,"lightskyblue")
colors
rm(list=ls(all=TRUE))
library(ggplot2)
fpm<-read.csv("datasets/fpm.csv")
str(fpm)
colors<- c("darksalmon" ,"lightskyblue")
title<-"Basic Title"
dsFORp <- reshape2::melt(fpm, id.vars=c("Oblique","Rotation","kappa","Varname"))  ## id.vars declares MEASURED variables (as opposed to RESPONSE variable)
dsFORp$positive <- dsFORp$value >= 0 # positive value?
dsFORp$value<-abs(as.numeric(dsFORp$value))
head(dsFORp,20)
str(dsFORp)
p<-ggplot(dsFORp, aes(x=variable, y=value, fill=positive))+
ggtitle(title)+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
scale_y_continuous(limits=c(0,1))+
theme(axis.text.x =element_text(angle=60,hjust=1))+
facet_grid(Varname~.)
p
runApp("shinyEFA")
rm(list=ls(all=TRUE))
library(ggplot2)
fpm<-read.csv("datasets/fpm.csv")
fpm<-read.csv("data/fpm.csv")
View(fpm)
fpm<-read.csv("data/fpm.csv")
View(fpm)
str(fpm)
colors<- c("darksalmon" ,"lightskyblue")
title<-"Basic Title"
dsFORp <- reshape2::melt(fpm, id.vars=c("Oblique","Rotation","Kappa","Varname"))  ## id.vars declares MEASURED variables (as opposed to RESPONSE variable)
dsFORp$positive <- dsFORp$value >= 0 # positive value?
dsFORp$value<-abs(as.numeric(dsFORp$value))
head(dsFORp,20)
str(dsFORp)
p<-ggplot(dsFORp, aes(x=variable, y=value, fill=positive))+
ggtitle(title)+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
scale_y_continuous(limits=c(0,1))+
theme(axis.text.x =element_text(angle=60,hjust=1))+
facet_grid(Varname~.)
p
View(dsFORp)
dsFORp<-fpm[which(Rotation=="varimax"),]
dsFORp<-fpm[which(fpm$Rotation=="varimax"),]
dsFORp<-fpm[which(fpm$Rotation=="varimax"),]
dsFORp <- reshape2::melt(fpm, id.vars=c("Oblique","Rotation","Kappa","Varname"))  ## id.vars declares MEASURED variables (as opposed to RESPONSE variable)
dsFORp$positive <- dsFORp$value >= 0 # positive value?
dsFORp$value<-abs(as.numeric(dsFORp$value))
head(dsFORp,20)
str(dsFORp)
p<-ggplot(dsFORp, aes(x=variable, y=value, fill=positive))+
ggtitle(title)+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
scale_y_continuous(limits=c(0,1))+
theme(axis.text.x =element_text(angle=60,hjust=1))+
facet_grid(Varname~.)
p
View(dsFORp)
fpm<-fpm[which(fpm$Rotation=="varimax"),]
dsFORp <- reshape2::melt(fpm, id.vars=c("Oblique","Rotation","Kappa","Varname"))  ## id.vars declares MEASURED variables (as opposed to RESPONSE variable)
dsFORp$positive <- dsFORp$value >= 0 # positive value?
dsFORp$value<-abs(as.numeric(dsFORp$value))
head(dsFORp,20)
str(dsFORp)
p<-ggplot(dsFORp, aes(x=variable, y=value, fill=positive))+
ggtitle(title)+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
scale_y_continuous(limits=c(0,1))+
theme(axis.text.x =element_text(angle=60,hjust=1))+
facet_grid(Varname~.)
p
p<-ggplot(dsFORp, aes(x=variable, y=value, fill=positive))+
ggtitle(title)+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
scale_y_continuous(limits=c(0,1))+
theme(axis.text.x =element_text(angle=0,hjust=1))+
facet_grid(Varname~.)
p
p<-ggplot(dsFORp, aes(x=variable, y=value, fill=positive))+
ggtitle(title)+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
scale_y_continuous(limits=c(0,1))+
theme(axis.text.x =element_text(angle=0,hjust=0))+
facet_grid(Varname~.)
p
p<-ggplot(dsFORp, aes(x=variable, y=value, fill=positive))+
ggtitle(title)+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
scale_y_continuous(limits=c(0,1))+
theme(axis.text.x =element_text(angle=0,hjust=-1))+
facet_grid(Varname~.)
p
p<-ggplot(dsFORp, aes(x=variable, y=value, fill=positive))+
ggtitle(title)+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
scale_y_continuous(limits=c(0,1))+
theme(axis.text.x =element_text(angle=0,hjust=.5))+
facet_grid(Varname~.)
p
dsFORp$positive <- dsFORp$value >= 0 # positive value?
View(dsFORp)
fpm<-fpm[which(fpm$Rotation=="varimax"),]
dsFORp <- reshape2::melt(fpm, id.vars=c("Oblique","Rotation","Kappa","Varname"))  ## id.vars declares MEASURED variables (as opposed to RESPONSE variable)
dsLong <- plyr::rename(dsLong, replace=c(variable="factor",value="loading"))
dsFORp$positive <- dsFORp$loading >= 0 # positive value?
dsFORp$loading<-abs(as.numeric(dsFORp$loading))
head(dsFORp,20)
str(dsFORp)
p<-ggplot(dsFORp, aes(x=factor, y=loading, fill=positive))+
ggtitle(title)+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
scale_y_continuous(limits=c(0,1))+
theme(axis.text.x =element_text(angle=0,hjust=.5))+
facet_grid(Varname~.)
p
dsFORp <- reshape2::melt(fpm, id.vars=c("Oblique","Rotation","Kappa","Varname"))  ## id.vars declares MEASURED variables (as opposed to RESPONSE variable)
dsLong <- plyr::rename(dsLong, replace=c(variable="factor",value="loading"))
dsFORp <- reshape2::melt(fpm, id.vars=c("Oblique","Rotation","Kappa","Varname"))  ## id.vars declares MEASURED variables (as opposed to RESPONSE variable)
dsFORp <- plyr::rename(dsFORp, replace=c(variable="factor",value="loading"))
dsFORp$positive <- dsFORp$loading >= 0 # positive value?
dsFORp$loading<-abs(as.numeric(dsFORp$loading))
head(dsFORp,20)
str(dsFORp)
p<-ggplot(dsFORp, aes(x=factor, y=loading, fill=positive))+
ggtitle(title)+
geom_bar(stat="identity")+
scale_fill_manual(values=colors)+
scale_y_continuous(limits=c(0,1))+
theme(axis.text.x =element_text(angle=0,hjust=.5))+
facet_grid(Varname~.)
p
library(shiny)
runApp("shinyEFA")
getwd()
runApp("./shinyEFA")
rm(list=ls(all=TRUE))
library(shiny)
runApp("shinyApp")
rm(list=ls(all=TRUE))
library(shiny)
runApp("shinyApp")
patterns<-read.csv("data/fpm.csv") # short form
rm(list=ls(all=TRUE))
library(shiny)
runApp("shinyApp")
runApp("shinyApp")
rm(list=ls(all=TRUE))
library(shiny)
runApp("shinyApp")
rm(list=ls(all=TRUE))
library(shiny)
runApp("shinyApp")
runApp("shinyApp")
rm(list=ls(all=TRUE))
library(ggplot2)
fpm<-read.csv("data/fpm.csv")
str(fpm)
colors<- c("darksalmon" ,"lightskyblue")
title<-"Basic Title"
fpm<-read.csv("shinyApp/data/fpm.csv")
str(fpm)
fpm<-read.csv("shinyApp/data/fpm.csv")
str(fpm)
rm(list=ls(all=TRUE))
library(shiny)
runApp("shinyApp")
rm(list=ls(all=TRUE))
install.packages("GPArotation")
install.packages("psych")
library(GPArotation)
data(Harman)
library(psych)
data(Harman.8)
View(Harman.8)
View(Harman8)
library(psych)
data(Harman)
View(Harman.8)
View(Harman.Burt)
View(Harman.Holzinger)
View(Harman8)
library(GPArotation)
data(Harman)
library(psych)
data(Harman)
library(GPArotation)
data(Harman)
library(GPArotation)
data(Harman)
library(GPArotation)
data(Harman8)
library(GPArotation)
data(Harman)
rm(list=ls(all=TRUE))
data(Harman.8)
data(Harman)
View(Harman.8)
View(Harman.Burt)
View(Harman.8)
View(Harman.Burt)
View(Harman.Holzinger)
AthleticsData <- read.csv(file.path(getwd(),"datasets","AthleticsData.csv"))
AthleticsData <- read.csv(file.path(getwd(),"data","AthleticsData.csv"))
AthleticsData <- read.csv(file.path(getwd(),"shinyApp/data","AthleticsData.csv"))
Harman.Holzinger
R<-cor(AthleticsData) # Correlation matrix, 8 physical attribues of 305 girsl (from Harman, 1976)
Scree.Plot(R)
source(file.path(getwd(),"code/sourced","Steiger R library functions.txt"))
source(file.path(getwd(),"code/sourced","AdvancedFactorFunctions_CF.R"))
Scree.Plot(R)
rm(list=ls(all=TRUE))
install.packages("GPArotation")
install.packages("psych")
library(GPArotation)
data(Harman.8)
library(psych)
data(Harman)
##### Adding rotations to AdvancedFactorFunctions #####
AthleticsData <- read.csv(file.path(getwd(),"shinyApp/data","AthleticsData.csv"))
R<-cor(AthleticsData) # Correlation matrix, 8 physical attribues of 305 girsl (from Harman, 1976)
source(file.path(getwd(),"code/sourced","Steiger R library functions.txt"))
source(file.path(getwd(),"code/sourced","AdvancedFactorFunctions_CF.R"))
# source(file.path(getwd(),"code/sourced","AdvancedFactorFunctions.R"))
# R<-as.matrix(Harman.Holzinger)
Scree.Plot(R)
install.packages("GPArotation")
rm(list=ls(all=TRUE))
# install.packages("GPArotation")
# install.packages("psych")
library(GPArotation)
data(Harman.8)
library(psych)
data(Harman)
##### Adding rotations to AdvancedFactorFunctions #####
AthleticsData <- read.csv(file.path(getwd(),"shinyApp/data","AthleticsData.csv"))
R<-cor(AthleticsData) # Correlation matrix, 8 physical attribues of 305 girsl (from Harman, 1976)
source(file.path(getwd(),"code/sourced","Steiger R library functions.txt"))
source(file.path(getwd(),"code/sourced","AdvancedFactorFunctions_CF.R"))
# source(file.path(getwd(),"code/sourced","AdvancedFactorFunctions.R"))
# R<-as.matrix(Harman.Holzinger)
Scree.Plot(R)
FA.Stats(R,n.factors=1:4,n.obs=305, RMSEA.cutoff=0.05)
library(datasets)
View(AthleticsData)
View(Harman.Burt)
rm(list=ls(all=TRUE))
library(psych)
abilities<-data(Harman.Holzinger)
data(Harman.Holzinger)
data(Harman)
abilities<-data(Harman.Holzinger)
abilities<-Harman.Holzinger
emotions <-Harman.Burt
View(emotions)
AthleticsData <- read.csv(file.path(getwd(),"data","AthleticsData.csv"))
data(Harman.8)
View(Harman.8)
data(Harman8)
View(abilities)
physical<-Harman.8
rm(list=ls(c("physical","cognitive","emotional")))
rm(list=ls(c("physical","cognitive","emotional")))
physical<-Harman.8
rm(list=setdiff(ls(),c("physical","cognitive","emotional")))
rm(list=ls(all=TRUE))
library(shiny)
library(datasets)
library(ggplot2) # load ggplot
library(GPArotation)
data(Harman8)
library(psych)
data(Harman)
# Correlations of eight physical variables (from Harman, 1966), N = 305
physical<-Harman.8
# Harman.Holzinger: 9 x 9 correlation matrix of cognitive ability tests, N = 696.
cognitive<-Harman.Holzinger
# Harman.Burt: a 8 x 8 correlation matrix of “emotional" items. N = 172
emotional <-Harman.Burt
rm(list=setdiff(ls(),c("physical","cognitive","emotional")))
getwd()
source(file.path(getwd(),"code/sourced","Steiger R library functions.txt"))
source(file.path(getwd(),"code/sourced","AdvancedFactorFunctions_CF.R"))
source("Steiger R library functions.txt"))
screePlot<-Scree.Plot(R)
R<-physical #input$dataset
screePlot<-Scree.Plot(R)
FA.Stats(R,n.factors=1:4,n.obs=305, RMSEA.cutoff=0.05)
FA.Stats(R,n.factors=1:4,n.obs=1305, RMSEA.cutoff=0.05)
FA.Stats(R,n.factors=1:4,n.obs=105, RMSEA.cutoff=0.05)
rm(list=ls(all=TRUE))
library(shiny)
runApp("shinyApp")
data(Harman8)
write.csv("data/cognitive.csv")
write.csv(physical,"data/physical.csv")
write.csv(physical,"physical.csv")
write.csv(emotional,"emotional.csv")
write.csv(cognitive,"cognitive.csv")
physical2<-as.matrix(read.csv("shinyApp/data/physical.csv"")
physical2<-as.matrix(read.csv("shinyApp/data/physical.csv"")
physical2<-as.matrix(read.csv("shinyApp/data/physical.csv")
physical2<-as.matrix(read.csv("shinyApp/data/physical.csv"))
physical2<-as.matrix(read.csv("shinyApp/data/physical.csv"))
View(physical2)
View(physical)
physical2<-as.matrix(read.csv("shinyApp/data/physical.csv",header=TRUE))
physical2<-as.double.matrix(read.csv("shinyApp/data/physical.csv",header=TRUE))
rm(list=ls(all=TRUE))
library(shiny)
library(datasets)
library(ggplot2) # load ggplot
library(GPArotation)
data(Harman8)
library(psych)
data(Harman)
# Correlations of eight physical variables (from Harman, 1966), N = 305
physical<-Harman.8
n.physical<-305
write.csv(physical,"physical.csv")
# Harman.Holzinger: 9 x 9 correlation matrix of cognitive ability tests, N = 696.
cognitive<-Harman.Holzinger
n.cognitive<-696
write.csv(cognitive,"cognitive.csv")
# Harman.Burt: a 8 x 8 correlation matrix of “emotional" items. N = 172
emotional <-Harman.Burt
n.emotional<-172
write.csv(emotional,"emotional.csv")
# ##### Adding rotations to AdvancedFactorFunctions #####
# AthleticsData <- read.csv(file.path(getwd(),"shinyApp/data","AthleticsData.csv"))
# R<-cor(AthleticsData) # Correlation matrix, 8 physical attribues of 305 girsl (from Harman, 1976)
rm(list=setdiff(ls(),c("physical","cognitive","emotional")))
screePlot<-Scree.Plot(R)
source(file.path(getwd(),"code/sourced","Steiger R library functions.txt"))
source(file.path(getwd(),"code/sourced","AdvancedFactorFunctions_CF.R"))
R<-physical #input$dataset
screePlot
Scree.Plot(R)
